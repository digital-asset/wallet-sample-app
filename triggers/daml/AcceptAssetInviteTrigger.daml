module AcceptAssetInviteTrigger where

import Account
import qualified Daml.Trigger as T
import DA.Optional (isSome)

-- Auto accept assset invitation
acceptAssetInviteTrigger: T.Trigger ()
acceptAssetInviteTrigger = T.Trigger 
  { 
    initialize = pure (),
    updateState = \_  -> pure (),
    registeredTemplates = T.RegisteredTemplates [T.registeredTemplate @AssetHoldingAccountProposal, T.registeredTemplate @AssetHoldingAccount],
    rule = \p -> do
      debug "ACCEPT ASSET INVITE TRIGGER FIRED"
      requests <- T.query @AssetHoldingAccountProposal
      let isMe = (\request -> request.recipient == p)
      let meList = filter (\(_, contract) -> isMe contract) requests
      let requests =  meList

      debug ("Asset holding account invites", requests)
      
      --unless ( DA.Foldable.null requests ) do
      case requests of 
        [] -> pure()
        (requestCid, c) :: _ -> do
          optAccount <- T.queryContractKey @AssetHoldingAccount (c.account.assetType, p)
          if isSome(optAccount) then 
              -- Reject proposal if there is existing Asset Holding Account
              T.dedupExercise requestCid AssetHoldingAccountProposal_Reject
          else
            T.dedupExercise requestCid AssetHoldingAccountProposal_Accept
            
    ,
    heartbeat = None
  }
