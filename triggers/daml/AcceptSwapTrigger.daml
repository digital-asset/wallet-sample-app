
module AcceptSwapTrigger where

import qualified Daml.Trigger as T
import DA.Optional (whenSome)
import Account 
import Asset

-- Auto accepts incoming swap requests
-- Configed on Daml hub for only the userAdmin party

acceptSwapTrigger: T.Trigger ()
acceptSwapTrigger = T.Trigger 
  { 
    initialize = pure (),
    updateState = \_  -> pure (),
    registeredTemplates = T.RegisteredTemplates [T.registeredTemplate @Asset, T.registeredTemplate @Trade, T.registeredTemplate @AssetHoldingAccount, T.registeredTemplate @TransferPreApproval, T.registeredTemplate @AssetInSwap],
    rule = \p -> do
      debug ("ACCEPT SWAP TRIGGER FIRED")

      tradeRequests <- T.query @Trade
      allAssetContracts <- T.query @Asset

      let isMyIncomingTrades = (\tradeRequests -> tradeRequests.receiver == p)
      let myTrades = filter (\(_, contract) -> isMyIncomingTrades contract) tradeRequests

      debug ("Incoming swap requests", myTrades)
      
      --unless ( DA.Foldable.null myTrades ) do 
      case myTrades of 
        [] -> pure ()

        (tradeCid, c) :: _ -> do
          optOfferedAsset <- T.queryContractId c.offeredAssetCid
          whenSome optOfferedAsset
            \offeredAsset -> do
              optOfferedAssetAccount <- T.queryContractKey @AssetHoldingAccount (offeredAsset.asset.assetType, c.receiver)            
              whenSome optOfferedAssetAccount
                \_ -> do
                  optRequestedAssetTxPreApproval <- T.queryContractId c.requestedAssetTxPreApprovalCid
                  whenSome optRequestedAssetTxPreApproval
                    \requestedAssetTxPreApproval -> do
                      let isRequestedAsset = (\asset -> asset.assetType == requestedAssetTxPreApproval.asset.assetType && asset.owner == p)
                      let requestedAssets = filter(\(cid,contract) -> isRequestedAsset contract) allAssetContracts
                      -- Ensures that the admin will always have enough balance to swap with
                      -- If we don't have any assets, issue some
                      if (Prelude.null requestedAssets) || 
                        (Prelude.sum (map (\x -> x._2.amount) requestedAssets) < 
                          requestedAssetTxPreApproval.asset.amount)
                      then  
                        do 
                          requestedAssetHoldingAccountCid <- T.queryContractKey @AssetHoldingAccount(requestedAssetTxPreApproval.asset.assetType, p)
                          whenSome requestedAssetHoldingAccountCid
                            \(cid, c) -> do
                              debug("Issuing assets for swap")
                              T.dedupExercise cid Airdrop with 
                                amount = requestedAssetTxPreApproval.asset.amount
                      else                 
                          T.dedupExercise tradeCid Trade_Settle with 
                            requestedAssetCids = map fst requestedAssets 
                          
    ,
    heartbeat = None
  }
