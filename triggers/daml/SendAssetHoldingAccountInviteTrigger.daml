module SendAssetHoldingAccountInviteTrigger where

import Account
import qualified Daml.Trigger as T
import DA.Foldable
import DA.Action

sendAssetHoldingAccountInviteTrigger: T.Trigger ()
sendAssetHoldingAccountInviteTrigger = T.Trigger 
  { 
    initialize = pure (),
    updateState = \_  -> pure (),
    registeredTemplates = T.RegisteredTemplates [T.registeredTemplate @AssetHoldingAccountRequest, T.registeredTemplate @AssetHoldingAccount],
    rule = \p -> do
      debug "SEND ACCOUNT INVITE TRIGGER FIRED"
      asset_holding_account_requests <- T.query @AssetHoldingAccountRequest
      let isNotMe = (\requests -> requests.recipient /= p)
      let notMeList = filter (\(_, contract) -> isNotMe contract) asset_holding_account_requests
      let requests = map fst notMeList
      debug ("requests",requests)
      assetAccounts <- T.query @AssetHoldingAccount
      debug ("assetAccounts", assetAccounts)
      let isET = (\account -> account.assetType.symbol == "ET" && account.assetType.issuer == p && account.owner == p)
      let etAccounts = filter (\(_, contract) -> isET contract) assetAccounts
      debug ("etAccounts", map fst etAccounts)
      
      unless (DA.Foldable.null requests)
        case etAccounts of 
          [] -> pure ()
          (cid, _) :: _ -> mapA_(\request -> T.dedupExercise request AssetHoldingAccountRequest_Accept with assetHoldingAccountCid = cid)  requests

    ,
    heartbeat = None
  }