module Account.Test where
import Account
import Asset

import DA.Assert
import DA.List
import DA.Set as Set
import Daml.Script
import DA.Optional

accountBalance_test: Script ()
dupe_account_test  : Script ()
account_reshare_test  : Script ()
account_airdrop_test: Script ()
transfer_test: Script ()
dupe_account_invite_test: Script ()
account_recipient_mismatch_test: Script ()
trade_test: Script ()

data TestParties = TestParties with
  alice: Party
  bob: Party
  issuer: Party
  --party1: Party
  --party2: Party
  fed : Party -- Federal reserve is the issuer of tknUSD
  boe : Party -- Bank of England is the issuer of tknGBP

setupParties: Script TestParties
setupParties = do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  issuer <- allocateParty "issuer"
  --party1 <- allocateParty "party1"
  --party2 <- allocateParty "party2"
  fed <- allocateParty "Fed"
  boe <- allocateParty "BoE"
  return $ TestParties with ..

accountBalance : AssetHoldingAccount -> Script Decimal 
accountBalance account = do
  assets <- queryFilter @Asset account.owner
    \asset -> (asset.owner==account.owner) && (asset.assetType==account.assetType)
  return $ sum . map (\x -> x.amount) $ (unzip assets)._2

assertBalance: Party -> ContractId AssetHoldingAccount -> Decimal -> Script ()
assertBalance party account_cid expected_amount = do 
  optionalAccount <- queryContractId party account_cid
  let account = fromSome optionalAccount
  balance <- accountBalance account
  balance === expected_amount

issuer_tkn: Party -> AssetType
issuer_tkn p = AssetType with
  issuer = p
  symbol = "TKN"
  fungible = True
  reference = None

alice_tkn: Party -> AssetType
alice_tkn p = AssetType with
  issuer = p
  symbol = "ALC"
  fungible = True
  reference = None 

accountBalance_test = do
  testParties@TestParties{..} <- setupParties

  account_cid <- submit issuer do
    createCmd AssetHoldingAccount with 
      assetType = issuer_tkn issuer
      owner = issuer
      airdroppable = False
      resharable = True

  assertBalance issuer account_cid 0.0
 
  asset_cid_0 <- submit issuer do
    createCmd Asset with
      assetType = issuer_tkn issuer
      owner = issuer
      amount = 10.0
      observers = Set.empty
  
  asset_cid_1 <- submit issuer do
    createCmd Asset with
      assetType = issuer_tkn issuer
      owner = issuer
      amount = 5.0
      observers = Set.empty

  let expected:Decimal  = 15.0

  assertBalance issuer account_cid expected

  pure()

dupe_account_test = script do
  testParties@TestParties{..} <- setupParties

  asset_cid <- submit alice do 
    createCmd Asset with
      assetType = alice_tkn alice
      owner = alice
      amount = 50.0
      observers = Set.empty
  
  aliceALCAccCid <- submit alice do
    createCmd AssetHoldingAccount with 
      assetType = alice_tkn alice
      owner = alice
      airdroppable = False
      resharable = True
  
  -- Owner cannot have more than one account for the same asset type
  submitMustFail alice do
    createCmd AssetHoldingAccount with 
      assetType = alice_tkn alice
      owner = alice
      airdroppable = True
      resharable = True 
    
  -- Verify privacy of Alice's AssetHoldingAccount contract
  proposals <- query @AssetHoldingAccount bob
  assertEq [] (map snd proposals)

  pure()

account_reshare_test = script do
  testParties@TestParties{..} <- setupParties
  
  let 
    non_shareable_issuer_token = AssetType with
      issuer = issuer
      symbol = "NON-SHAREABLE-ISSUER"
      fungible = True
      reference = None
  
-- Non resharable test
  non_resharable_account_cid <- submit issuer do
    createCmd AssetHoldingAccount with 
      assetType = non_shareable_issuer_token
      owner = issuer
      airdroppable = False
      resharable = False 
  
  -- Issuer can share with Alice
  alice_account_proposal_cid <- submit issuer do
    exerciseByKeyCmd @AssetHoldingAccount (non_shareable_issuer_token, issuer) Invite_New_Asset_Holder with
      recipient = alice
    
  alice_account_cid <- submit alice do
    exerciseCmd alice_account_proposal_cid AssetHoldingAccountProposal_Accept
  
  -- Account cannot be further reshared by Alice to Bob
  submitMustFail alice do 
    exerciseCmd alice_account_cid Invite_New_Asset_Holder with 
      recipient = bob
  
-- Sharable Test
  resharable_account_cid <- submit issuer do
    createCmd AssetHoldingAccount with 
      assetType = issuer_tkn issuer
      owner = issuer
      airdroppable = False
      resharable = True 

  -- Issuer can share with Alice
  alice_shareable_account_proposal_cid <- submit issuer do
    exerciseCmd resharable_account_cid Invite_New_Asset_Holder with
      recipient = alice
  
  alice_shareable_account_cid <- submit alice do
    exerciseCmd alice_shareable_account_proposal_cid AssetHoldingAccountProposal_Accept
    
  -- Account can be further reshared by Alice to Bob
  bob_shareable_account_proposal_cid <- submit alice do 
    exerciseCmd alice_shareable_account_cid Invite_New_Asset_Holder with  
      recipient = bob
  pure()

account_airdrop_test = script do

  testParties@TestParties{..} <- setupParties

  let 
    airdroppable_token = AssetType with
      issuer = issuer
      symbol = "airdroppable_token"
      fungible = True
      reference = None

  let 
    non_airdroppable_token = AssetType with
      issuer = issuer
      symbol = "non_airdroppable_token"
      fungible = True
      reference = None

  -- Airdroppable test
  airdroppable_account_cid <- submit issuer do
    createCmd AssetHoldingAccount with 
      assetType = airdroppable_token
      owner = issuer
      airdroppable = True
      resharable = False 

  -- Issuer invites Alice to create account
  alice_airdroppable_account_proposal_cid <- submit issuer do
    exerciseCmd airdroppable_account_cid Invite_New_Asset_Holder with
      recipient = alice

  -- Alice accepts the invite
  alice_airdroppable_account_cid <- submit alice do
    exerciseCmd alice_airdroppable_account_proposal_cid AssetHoldingAccountProposal_Accept

  -- Issuer can airdrop amounts to Alice
  alice_asset_cid <- submit issuer do 
    exerciseCmd alice_airdroppable_account_cid Airdrop with
      amount = 10.0

-- Non Airdroppable test
  non_airdroppable_account_cid <- submit issuer do
    createCmd AssetHoldingAccount with 
      assetType = non_airdroppable_token
      owner = issuer
      airdroppable = False
      resharable = False 

  -- Issuer invites Alice to create account
  alice_non_airdroppable_account_proposal_cid <- submit issuer do
    exerciseCmd non_airdroppable_account_cid Invite_New_Asset_Holder with
      recipient = alice

  -- Alice accepts the invite
  alice_airdroppable_account_cid <- submit alice do
    exerciseCmd alice_non_airdroppable_account_proposal_cid AssetHoldingAccountProposal_Accept

  -- Issuer cannot airdrop tokens
  submitMustFail issuer do 
    exerciseCmd alice_airdroppable_account_cid Airdrop with
      amount = 10.0

  pure()

transfer_test = script do

  -- SETUP START
  testParties@TestParties{..} <- setupParties

  let 
    transfer_token = AssetType with
      issuer = issuer
      symbol = "transfer_token"
      fungible = True
      reference = None

  issuer_account_cid <- submit issuer do
    createCmd AssetHoldingAccount with 
      assetType = transfer_token
      owner = issuer
      airdroppable = True
      resharable = False 

  asset_cid <- submit issuer do
    createCmd Asset with
      assetType = transfer_token
      owner = issuer
      amount = 10.0
      observers = Set.empty
  
  -- Issuer invites Alice to create account
  alice_account_proposal_cid <- submit issuer do
    exerciseCmd issuer_account_cid Invite_New_Asset_Holder with
      recipient = alice

  -- Alice accepts the invite
  alice_account_cid <- submit alice do
    exerciseCmd alice_account_proposal_cid AssetHoldingAccountProposal_Accept
  -- SETUP END

  -- Test ownership transfer
  submit issuer do 
    exerciseCmd issuer_account_cid Create_Transfers with
      assetCids = [asset_cid]
      transfers = [(4.0, alice)]
  
  aliceTransfers <- queryFilter @AssetTransfer alice (\tx -> tx.recipient==alice)
  let aliceTransferCid = (head aliceTransfers)._1

  -- Asset issuer or owner cannot accept transfer by calling Accept_Transfer choice on Asset contract
  -- Transfer can only be accepted by exercising Deposit_Transfer_Into_Account choice
  -- on the recipient's AssetHoldingAccount contract
  submitMustFail alice do
    exerciseCmd aliceTransferCid Accept_Transfer

  -- Ownership transfer via Deposit_Transfer_Into_Account
  party1_asset_cids <- submit alice do
    exerciseCmd alice_account_cid Deposit_Transfer_Into_Account with 
      transferCid = aliceTransferCid

  -- Assert balance
  optAccount <- queryContractId issuer issuer_account_cid
  balance <- accountBalance $ fromSome optAccount
  debug balance
  balance === 6.0

  -- Cannot create transfer with negative amount
  submitMustFail issuer do 
    exerciseCmd issuer_account_cid Create_Transfers with
      assetCids = [asset_cid]
      transfers = [(-1.0, alice)]

  -- Test for double spend by creating transfer using duplicate assets
  submitMustFail issuer do 
    exerciseCmd issuer_account_cid Create_Transfers with
      assetCids = [asset_cid, asset_cid]
      transfers = [(1.0, alice)]

  pure()

dupe_account_invite_test = do
  testParties@TestParties{..} <- setupParties

  account_cid <- submit issuer do
    createCmd AssetHoldingAccount with 
      assetType = issuer_tkn issuer
      owner = issuer
      airdroppable = False
      resharable = False 

  -- first invitation
  alice_account_proposal_cid_1 <- submit issuer do
    exerciseCmd account_cid Invite_New_Asset_Holder with
      recipient = alice

  -- dupe invitation
  alice_account_proposal_cid_2 <- submit issuer do
    exerciseCmd account_cid Invite_New_Asset_Holder with
      recipient = alice

  -- alice can accept first
  alice_account_cid <- submit alice do
    exerciseCmd alice_account_proposal_cid_1 AssetHoldingAccountProposal_Accept

  -- alice fails to accept second
  submitMustFail alice do
      exerciseCmd alice_account_proposal_cid_2 AssetHoldingAccountProposal_Accept

  pure()

account_recipient_mismatch_test = do
  testParties@TestParties{..} <- setupParties

  account_cid <- submit issuer do
    createCmd AssetHoldingAccount with 
      assetType = issuer_tkn issuer
      owner = issuer
      airdroppable = False
      resharable = False 

  bob_account_proposal_cid_1 <- submit issuer do
    exerciseCmd account_cid Invite_New_Asset_Holder with
      recipient = bob
  
  bob_account_proposal_cid_1 <- submit issuer do
    exerciseCmd account_cid Invite_New_Asset_Holder with
      recipient = bob
  
  asset_cid <- submit issuer do
    createCmd Asset with
      assetType = issuer_tkn issuer
      owner = issuer
      amount = 10.0
      observers = Set.empty

  submit issuer do 
    exerciseCmd account_cid Create_Transfers with
      assetCids = [asset_cid]
      transfers = [(1.0, bob)]

  -- Get transfers
  bobTransfers <- queryFilter @AssetTransfer bob (\tx -> tx.recipient==bob)
  let bobTransfer_cid = (head bobTransfers)._1

  -- recipient of transfer must be owner of account
  submitMustFail issuer do
    exerciseCmd account_cid Deposit_Transfer_Into_Account with transferCid = bobTransfer_cid

  pure()

trade_test = do
  testParties@TestParties{..} <- setupParties

-- Account creation and asset issuance start
  let 
    tknUSD = AssetType with
      issuer = fed
      symbol = "USD"
      fungible = True
      reference = None
  let 
    tknGBP = AssetType with
      issuer = boe
      symbol = "GBP"
      fungible = True
      reference = None
  
  -- Account creation start
  fed_usd_account_cid <- submit fed do
    createCmd AssetHoldingAccount with 
      assetType = tknUSD
      owner = fed
      airdroppable = True
      resharable = False
  
  boe_gbp_account_cid <- submit boe do
    createCmd AssetHoldingAccount with 
      assetType = tknGBP
      owner = boe
      airdroppable = True
      resharable = False

  alice_usd_account_invite_cid <- submit fed do
    exerciseCmd fed_usd_account_cid Invite_New_Asset_Holder with recipient = alice

  alice_usd_account_cid <- submit alice do
    exerciseCmd alice_usd_account_invite_cid AssetHoldingAccountProposal_Accept

  bob_gbp_account_invite_cid <- submit boe do
    exerciseCmd boe_gbp_account_cid Invite_New_Asset_Holder with recipient = bob

  bob_gbp_account_cid <- submit bob do
    exerciseCmd bob_gbp_account_invite_cid AssetHoldingAccountProposal_Accept
  -- Account creation end

  -- Asset issuance start
  alice_usd_asset_cid_1 <- submit fed do
    exerciseCmd alice_usd_account_cid Airdrop with
      amount = 1.0
  
  alice_usd_asset_cid_2 <- submit fed do
    exerciseCmd alice_usd_account_cid Airdrop with
      amount = 4.0

  bob_gbp_asset_cid_1 <- submit boe do
    exerciseCmd bob_gbp_account_cid Airdrop with
      amount = 10.0
      
  bob_gbp_asset_cid_2 <- submit boe do
    exerciseCmd bob_gbp_account_cid Airdrop with
      amount = 10.0
  -- Asset issuance end
-- End of Account creation and asset issuance

-- Start of invitations to accounts
  bob_usd_account_invite_cid <- submit fed do
    exerciseCmd fed_usd_account_cid Invite_New_Asset_Holder with
      recipient = bob

  bob_usd_account_cid <- submit bob do
    exerciseCmd bob_usd_account_invite_cid AssetHoldingAccountProposal_Accept

  alice_gbp_account_invite_cid <- submit boe do
    exerciseCmd boe_gbp_account_cid Invite_New_Asset_Holder with
      recipient = alice

  alice_gbp_account_cid <- submit alice do
    exerciseCmd alice_gbp_account_invite_cid AssetHoldingAccountProposal_Accept
-- End of invitations

 -- Balance before swap
  assertBalance alice alice_usd_account_cid 5.0
  assertBalance alice alice_gbp_account_cid 0.0

  assertBalance bob bob_gbp_account_cid 20.0
  assertBalance bob bob_usd_account_cid 0.0

-- Start of swap
  -- Issuer proposes swap to party1
  submit alice do
    exerciseCmd alice_usd_account_cid Create_Trade with
      assetCids = [alice_usd_asset_cid_1, alice_usd_asset_cid_2]
      offeredAssetAmount = 3.0
      requestedAsset = Asset with
        assetType = tknGBP
        owner = bob
        amount = 13.0
        observers = Set.empty

  bobIncomingTrades <- queryFilter @Account.Trade bob (\trade -> trade.receiver==bob)
  let (tradeCid, trade) = head bobIncomingTrades

  submit bob do
    exerciseCmd tradeCid Trade_Settle with
      requestedAssetCids = [bob_gbp_asset_cid_1, bob_gbp_asset_cid_2]

 -- Balance after swap
  assertBalance alice alice_usd_account_cid 2.0
  assertBalance alice alice_gbp_account_cid 13.0

  assertBalance bob bob_gbp_account_cid 7.0
  assertBalance bob bob_usd_account_cid 3.0

  pure()